// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// print_prior
std::vector<std::string> print_prior(const Rcpp::List& p_prior_r);
RcppExport SEXP _ggdmcPrior_print_prior(SEXP p_prior_rSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::List& >::type p_prior_r(p_prior_rSEXP);
    rcpp_result_gen = Rcpp::wrap(print_prior(p_prior_r));
    return rcpp_result_gen;
END_RCPP
}
// dprior
std::vector<double> dprior(const Rcpp::List& p_prior_r, const Rcpp::NumericVector& parameters_r);
RcppExport SEXP _ggdmcPrior_dprior(SEXP p_prior_rSEXP, SEXP parameters_rSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::List& >::type p_prior_r(p_prior_rSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type parameters_r(parameters_rSEXP);
    rcpp_result_gen = Rcpp::wrap(dprior(p_prior_r, parameters_r));
    return rcpp_result_gen;
END_RCPP
}
// rprior
Rcpp::NumericMatrix rprior(const Rcpp::List& p_prior_r, unsigned int n);
RcppExport SEXP _ggdmcPrior_rprior(SEXP p_prior_rSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::List& >::type p_prior_r(p_prior_rSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(rprior(p_prior_r, n));
    return rcpp_result_gen;
END_RCPP
}
// sumlogprior
double sumlogprior(const Rcpp::List& p_prior_r, const Rcpp::NumericVector& parameters_r);
RcppExport SEXP _ggdmcPrior_sumlogprior(SEXP p_prior_rSEXP, SEXP parameters_rSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::List& >::type p_prior_r(p_prior_rSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type parameters_r(parameters_rSEXP);
    rcpp_result_gen = Rcpp::wrap(sumlogprior(p_prior_r, parameters_r));
    return rcpp_result_gen;
END_RCPP
}
// rtnorm
std::vector<double> rtnorm(unsigned int n, double p0, double p1, double lower, double upper);
RcppExport SEXP _ggdmcPrior_rtnorm(SEXP nSEXP, SEXP p0SEXP, SEXP p1SEXP, SEXP lowerSEXP, SEXP upperSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< unsigned int >::type n(nSEXP);
    Rcpp::traits::input_parameter< double >::type p0(p0SEXP);
    Rcpp::traits::input_parameter< double >::type p1(p1SEXP);
    Rcpp::traits::input_parameter< double >::type lower(lowerSEXP);
    Rcpp::traits::input_parameter< double >::type upper(upperSEXP);
    rcpp_result_gen = Rcpp::wrap(rtnorm(n, p0, p1, lower, upper));
    return rcpp_result_gen;
END_RCPP
}
// ptnorm
std::vector<double> ptnorm(std::vector<double> x, double p0, double p1, double lower, double upper, bool lower_tail, bool log_p);
RcppExport SEXP _ggdmcPrior_ptnorm(SEXP xSEXP, SEXP p0SEXP, SEXP p1SEXP, SEXP lowerSEXP, SEXP upperSEXP, SEXP lower_tailSEXP, SEXP log_pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<double> >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type p0(p0SEXP);
    Rcpp::traits::input_parameter< double >::type p1(p1SEXP);
    Rcpp::traits::input_parameter< double >::type lower(lowerSEXP);
    Rcpp::traits::input_parameter< double >::type upper(upperSEXP);
    Rcpp::traits::input_parameter< bool >::type lower_tail(lower_tailSEXP);
    Rcpp::traits::input_parameter< bool >::type log_p(log_pSEXP);
    rcpp_result_gen = Rcpp::wrap(ptnorm(x, p0, p1, lower, upper, lower_tail, log_p));
    return rcpp_result_gen;
END_RCPP
}
// dtnorm
std::vector<double> dtnorm(std::vector<double> x, double p0, double p1, double lower, double upper, bool log_p);
RcppExport SEXP _ggdmcPrior_dtnorm(SEXP xSEXP, SEXP p0SEXP, SEXP p1SEXP, SEXP lowerSEXP, SEXP upperSEXP, SEXP log_pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<double> >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type p0(p0SEXP);
    Rcpp::traits::input_parameter< double >::type p1(p1SEXP);
    Rcpp::traits::input_parameter< double >::type lower(lowerSEXP);
    Rcpp::traits::input_parameter< double >::type upper(upperSEXP);
    Rcpp::traits::input_parameter< bool >::type log_p(log_pSEXP);
    rcpp_result_gen = Rcpp::wrap(dtnorm(x, p0, p1, lower, upper, log_p));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_ggdmcPrior_print_prior", (DL_FUNC) &_ggdmcPrior_print_prior, 1},
    {"_ggdmcPrior_dprior", (DL_FUNC) &_ggdmcPrior_dprior, 2},
    {"_ggdmcPrior_rprior", (DL_FUNC) &_ggdmcPrior_rprior, 2},
    {"_ggdmcPrior_sumlogprior", (DL_FUNC) &_ggdmcPrior_sumlogprior, 2},
    {"_ggdmcPrior_rtnorm", (DL_FUNC) &_ggdmcPrior_rtnorm, 5},
    {"_ggdmcPrior_ptnorm", (DL_FUNC) &_ggdmcPrior_ptnorm, 7},
    {"_ggdmcPrior_dtnorm", (DL_FUNC) &_ggdmcPrior_dtnorm, 6},
    {NULL, NULL, 0}
};

RcppExport void R_init_ggdmcPrior(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
